var url = require('url'),
    http = require('http'),
    https = require('https'),
    parseXML = require('xml2js').parseString,
    XMLprocessors = require('xml2js/lib/processors');

/**
 * ...
 * @typedef {Object} CAS_options
 * @property {string}  cas_url
 * @property {string}  service_url
 * @property {('1.0'|'2.0'|'3.0')} [cas_version='3.0']
 * @property {boolean} [renew=false]
 * @property {string}  [session_name='cas_user']
 */

/**
 * ...
 * @param {CAS_options} options
 * @constructor
 */

function CAS(options) {

    if (!options || typeof options !== 'object') {
        throw new Error('CAS was not given a valid configuration object.');
    }
    if (options.cas_url === undefined) {
        throw new Error('CAS requires a cas_url parameter.');
    }
    if (options.service_url === undefined) {
        throw new Error('CAS requires a service_url parameter.');
    }

    this.cas_version = options.cas_version !== undefined ? options.cas_version : '2.0';

    if (this.cas_version === '1.0') {
        this._validateUri = '/validate';
        this._validate = function(body, callback) {
            var lines = body.split('\n');
            if (lines[0] === 'yes' && lines.length >= 2) {
                console.log('Successful CAS authentication.', lines[1]);
                return callback(null, lines[1]);
            } else if (lines[0] === 'no') {
                return callback(new Error('CAS authentication failed.'));
            } else {
                return callback(new Error('Response from CAS server was bad.'));
            }
        }
    } else if (this.cas_version === '2.0' || this.cas_version === '3.0') {
        this._validateUri = (this.cas_version === '2.0' ? '/serviceValidate' : '/p3/serviceValidate');
        this._validate = function(body, callback) {
            parseXML(body, {
		    trim: true,
		    normalize: true,
		    explicitArray: false,
		    tagNameProcessors: [XMLprocessors.normalize, XMLprocessors.stripPrefix]
		}, function(err, result) {
		    if (err) {
			return callback(new Error('Response from CAS server was bad.'));
		    }
		    try {
			var failure = result.serviceresponse.authenticationfailure;
			if (failure) {
			    return callback(new Error('CAS authentication failed (' + failure.$.code + ').'));
			}
			var success = result.serviceresponse.authenticationsuccess;
			if (success) {
			    return callback(null, success.user);
			} else {
			    return callback(new Error('CAS authentication failed.'));
			}
		    } catch (err) {
			console.log(err);
			return callback(new Error('CAS authentication failed.'));
		    }
		});
        }
    } else {
        throw new Error('The supplied CAS version ("' + this.cas_version + '") is not supported.');
    }

    this.cas_url = options.cas_url;
    var parsed_cas_url = url.parse(this.cas_url);
    this.request_client = (parsed_cas_url.protocol === 'http:' ? http : https);
    this.cas_host = parsed_cas_url.hostname;
    this.cas_port = parsed_cas_url.port;
    this.cas_path = parsed_cas_url.pathname;
    this.session_name = options.session_name !== undefined ? options.session_name : 'cas_user';

    this.service_url = options.service_url;
    this.renew = 'undefined' != typeof(options.renew) ? !!options.renew : false;
}

CAS.prototype.authenticate = function(req, res, callback) {
    if (req.session[this.session_name]) {
        callback(null, req.session[this.session_name]);
        return;
    }
    if (req.query && req.query.ticket) {
        this._handleTicket(req, res, callback);
    } else {
        this._login(req, res);
    }
};

/**
 * Redirects the client to the CAS login.
 */
CAS.prototype._login = function(req, res) {

    // Save the return URL in the session. If an explicit return URL is set as a
    // query parameter, use that. Otherwise, just use the URL from the request.
    req.session.cas_return_to = req.query.returnTo || url.parse(req.url).path;

    // Set up the query parameters.
    var query = {
        service: this.service_url + url.parse(req.url).pathname
    };
    if (this.renew) {
        query.renew = this.renew;
    }

    // Redirect to the CAS login.
    res.redirect(this.cas_url + url.format({
		pathname: '/login',
		query: query
	    }));
};

/**
 * Logout the currently logged in CAS user.
 */
CAS.prototype.logout = function(req, res) {

    req.session.destroy();
    // Redirect the client to the CAS logout.
    res.redirect(this.cas_url + '/logout?service=' + this.service_url);
};

/**
 * Handles the ticket generated by the CAS login requester and validates it with the CAS login acceptor.
 */
CAS.prototype._handleTicket = function(req, res, callback) {
    var request = this.request_client.get({
	    host: this.cas_host,
	    port: this.cas_port,
	    path: url.format({
		    pathname: this.cas_path + this._validateUri,
		    query: {
			service: this.service_url + url.parse(req.url).pathname,
			ticket: req.query.ticket
		    }
		}),
	    method: 'GET'
	}, function(response) {
	    response.setEncoding('utf8');
	    var body = '';
	    response.on('data', function(chunk) {
		    return body += chunk;
		}.bind(this));
	    response.on('end', function() {
		    console.log(body);
		    this._validate(body, function(err, user) {
			    if (err) {
				console.log(err);
				callback(err, null);
			    } else {
				req.session[this.session_name] = user;
				res.redirect(req.session.cas_return_to);
			    }
			}.bind(this));
		}.bind(this));
	    response.on('error', function(err) {
		    console.log('Response error from CAS: ', err);
		    callback(err, null);
		}.bind(this));
	}.bind(this));

        request.on('error', function(err) {
	    console.log('Request error with CAS: ', err);
	    callback(err, null);
	}.bind(this));

    request.end();
};

CAS.prototype.getUser = function() {
    return req.session[this.session_name] || null;
}

module.exports = CAS;
